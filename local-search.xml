<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Discrete 2D wave</title>
    <link href="/2022/09/09/water-wave/"/>
    <url>/2022/09/09/water-wave/</url>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Interactive 2D wave effect(Try clicking the left mouse button or dislodging on the picture below), implemented by iterating on the discrete mechanical wave equation. </p><p><h2 id="Discrete-wave-equation"><a href="#Discrete-wave-equation" class="headerlink" title="Discrete wave equation"></a>Discrete wave equation</h2><p>Wave equations are used to describe various wave phenomena. The simplest wave equation is as follows:</p><script type="math/tex; mode=display">\frac{\partial^2u}{\partial^2t} = c^2\nabla^2u</script><p>The continuous Form of the wave equation can be easily solved in simple cases, but difficult in unknown and complex cases.<br>The discrete form only concerns discrete points, like grid or array. For 2D wave, u(x,y,t) is the amplitude of the point (x, y) on grid, we can replace the left ans right turn of the continuous wave equation as follows: </p><script type="math/tex; mode=display">\frac{\partial^2u}{\partial^2t} = (u_{x,y,t+1} - u_{x,y,t}) - (u_{x,y,t} - u_{x,y,t-1})</script><script type="math/tex; mode=display">c^2\nabla^2u = c^2(u_{x+1, y, t} + u_{x-1,y,t} + u_{x,y-1,t}+u_{x,y+1,t}-4u_{x,y,t})</script><p>Thus we can could update the amplitude step by step:</p><script type="math/tex; mode=display">u_{x,y,t+1} =  c^2(u_{x+1, y, t} + u_{x-1,y,t} + u_{x,y-1,t}+u_{x,y+1,t}-4u_{x,y,t}) - u_{x,y,t-1} + 2u_{x,y,t}</script><h2 id="Implement-with-shader"><a href="#Implement-with-shader" class="headerlink" title="Implement with shader"></a>Implement with shader</h2><p>With discrete 2d wave equation, we can implement the update rule with shader.<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">vec2</span> wave_shader(<span class="hljs-type">vec2</span> st){<br><span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span> = <span class="hljs-type">vec2</span>(<span class="hljs-number">1.0</span> / resx, <span class="hljs-number">1.0</span> / resy);<br><span class="hljs-type">vec4</span> u0 = <span class="hljs-built_in">texture2D</span>(preState, st);<br><br><span class="hljs-type">vec4</span> u1 = <span class="hljs-built_in">texture2D</span>(preState, st + <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>) * <span class="hljs-keyword">offset</span>);<br><span class="hljs-type">vec4</span> u2 = <span class="hljs-built_in">texture2D</span>(preState, st + <span class="hljs-type">vec2</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>) * <span class="hljs-keyword">offset</span>);<br><span class="hljs-type">vec4</span> u3 = <span class="hljs-built_in">texture2D</span>(preState, st + <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">-1.0</span>) * <span class="hljs-keyword">offset</span>);<br><span class="hljs-type">vec4</span> u4 = <span class="hljs-built_in">texture2D</span>(preState, st + <span class="hljs-type">vec2</span>(<span class="hljs-number">-1.0</span>, <span class="hljs-number">0.0</span>) * <span class="hljs-keyword">offset</span>);<br><br><span class="hljs-type">float</span> d = <span class="hljs-built_in">length</span>(<span class="hljs-built_in">gl_FragCoord</span>.xy - m_pos);<br>d = <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">4.5</span>, <span class="hljs-number">0.5</span>, d);<br><br>d += <span class="hljs-number">2.0</span> * u0.x - u0.y + <span class="hljs-number">0.5</span>*(u1.x + u2.x + u3.x + u4.x - <span class="hljs-number">4.0</span> * u0.x);<br>d *= <span class="hljs-number">0.9</span>;<br><br>    <span class="hljs-comment">// returns new state and last state</span><br><span class="hljs-keyword">return</span> <span class="hljs-type">vec2</span>(d, u0.x);<br>}<br></code></pre></td></tr></table></figure><br>And finally we can get the Interactive wave effect in the beginning.</p></p>]]></content>
    
    
    <categories>
      
      <category>Computer-Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rendering</tag>
      
      <tag>shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Noises</title>
    <link href="/2022/09/04/noise/"/>
    <url>/2022/09/04/noise/</url>
    
    <content type="html"><![CDATA[<h3 id="Hash-functions"><a href="#Hash-functions" class="headerlink" title="Hash functions"></a>Hash functions</h3><p>Hash functions are used to generate feature values from input condition. Commonly used hash functions are listed below, ‘hashxy’ means input of the function is x dim condition and output is y dim.<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs smali">float hash11(float v)&#123;<br>    v = fract(p * 0.1031);<br>    v *= v + 33.33;<br>    v *= v + v;<br>   <span class="hljs-built_in"> return </span>fract(v);<br>&#125;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">float </span>hash21(vec2 v)&#123;<br>    vec3 v3 = fract(vec3(v.xyx));<br>    v3 += dot(v3, v3.yzx + 33.33);<br>   <span class="hljs-built_in"> return </span>fract((v3.x + v3.y) * v3.z);<br>&#125;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">float </span>hash31(vec3 v)&#123;<br>    v3 = fract(v3 * 0.1031);<br>    v3 += dot(v3, v3.zyx + 31.32);<br>   <span class="hljs-built_in"> return </span>fract((v3.x + v3.y) * v3.z);<br>&#125;<br><br>vec2 hash12(float v)&#123;<br>    vec3 v3 = fract(vec3(v) * vec3(.1031, .1030, .0973));<br> v3 += dot(v3, v3.yzx + 33.33);<br>   <span class="hljs-built_in"> return </span>fract((v3.xx + v3.yz) * v3.zy);<br>&#125;<br><br>vec2 hash22(vec2 v)&#123;<br>    vec3 v3 = fract(vec3(v.xyx) * vec3(.1031, .1030, .0973));<br>    v3 += dot(v3, v3.yzx + 33.33);<br>   <span class="hljs-built_in"> return </span>fract((v3.xx + v3.yz) * v3.zy);<br>&#125;<br><br>vec2 hash32(vec3 v)&#123;<br>    v3 = fract(v3 * vec3(.1031, .1030, .0973));<br>    v3 += dot(v3, v3.yzx + 33.33);<br>   <span class="hljs-built_in"> return </span>fract((v3.xx + v3.yz) * v3.zy);<br>&#125;<br><br>vec3 hash1to3(float p)&#123;<br>    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));<br>    p3 += dot(p3, p3.yzx+33.33);<br>   <span class="hljs-built_in"> return </span>fract((p3.xxy+p3.yzz)*p3.zyx); <br>&#125;<br><br>vec3 hash2to3(vec2 p)&#123;<br> vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));<br>    p3 += dot(p3, p3.yxz+33.33);<br>   <span class="hljs-built_in"> return </span>fract((p3.xxy+p3.yzz)*p3.zyx);<br>&#125;<br><br>vec3 hash33(vec3 p3)&#123;<br> p3 = fract(p3 * vec3(.1031, .1030, .0973));<br>    p3 += dot(p3, p3.yxz+33.33);<br>   <span class="hljs-built_in"> return </span>fract((p3.xxy + p3.yxx)*p3.zyx);<br>&#125;<br><br>vec4 hash1to4(float p)&#123;<br> vec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));<br>    p4 += dot(p4, p4.wzxy+33.33);<br>   <span class="hljs-built_in"> return </span>fract((p4.xxyz+p4.yzzw)*p4.zywx);<br>&#125;<br><br>vec4 hash2to4(vec2 p)&#123;<br> vec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));<br>    p4 += dot(p4, p4.wzxy+33.33);<br>   <span class="hljs-built_in"> return </span>fract((p4.xxyz+p4.yzzw)*p4.zywx);<br>&#125;<br><br>vec4 hash3to4(vec3 p)&#123;<br> vec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));<br>    p4 += dot(p4, p4.wzxy+33.33);<br>   <span class="hljs-built_in"> return </span>fract((p4.xxyz+p4.yzzw)*p4.zywx);<br>&#125;<br><br>vec4 hash44(vec4 p4)&#123;<br> p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));<br>    p4 += dot(p4, p4.wzxy+33.33);<br>   <span class="hljs-built_in"> return </span>fract((p4.xxyz+p4.yzzw)*p4.zywx);<br>&#125;<br><br></code></pre></td></tr></table></figure></p><h2 id="Random-functions"><a href="#Random-functions" class="headerlink" title="Random functions"></a>Random functions</h2><p>Random functions are used to generate random values. </p><p>rand() in std_c libary<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pf">uint <span class="hljs-keyword">state</span>=<span class="hljs-number">1</span>;<br><br>uint rand()&#123;<br>    <span class="hljs-keyword">state</span> = <span class="hljs-number">1103515245</span> * <span class="hljs-keyword">state</span> + <span class="hljs-number">12345</span>;<br> uint q = uint((<span class="hljs-keyword">state</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">65535</span>);<br>    return q;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>and sin rand<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">float</span> rand(<span class="hljs-type">vec2</span> st)&#123;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">fract</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(st.xy, <span class="hljs-type">vec2</span>(<span class="hljs-number">12.9898</span>,<span class="hljs-number">78.233</span>))) * <span class="hljs-number">43758.5453123</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Computer-Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>rendering</tag>
      
      <tag>shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glsl editor</title>
    <link href="/2022/08/17/shader/"/>
    <url>/2022/08/17/shader/</url>
    
    <content type="html"><![CDATA[<p>Testing glsl shader with webgl.</p><h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1><h1 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h1><iframe height=1080 width=90% src="../../../../my_script/page.html" frameborder=0></iframe>]]></content>
    
    
    <categories>
      
      <category>Computer-Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>rendering</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/16/hello-world/"/>
    <url>/2022/08/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
